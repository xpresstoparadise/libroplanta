<?xml version="1.0" encoding="utf-8"?>
<smartTagsSettings>
  <smartTag id="quantity_ref" enabled="True">
    <groupName lang="en">Quantities</groupName>
    <groupName lang="ru">Количественные данные</groupName>
    <xPathItems>uoms()//*[local-name()='UnitOfMeasure' and @isEnable='1']</xPathItems>
    <displayText>
      <text lang="en">concat('Quantity markup: ',./*[local-name()='Name'],' (',./*[local-name()='CatalogSymbol'],')')</text>
      <text lang="ru">concat('Разметка количественных данных: ',./*[local-name()='Name'],' (',./*[local-name()='CatalogSymbol'],')')</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;replace&gt;(?&lt;val&gt;[0-9]+(\.[0-9]+)?)((\s*)(?&lt;tolerance&gt;(?&lt;pm&gt;[-+±])(\s*)(?&lt;toleranceVal&gt;[0-9]+(\.[0-9]+)?)))?(\s+)(?&lt;uom&gt;%%uom))(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;replace&gt;(?&lt;val&gt;[0-9]+(,[0-9]+)?)((\s*)(?&lt;tolerance&gt;(?&lt;pm&gt;[-+±])(\s*)(?&lt;toleranceVal&gt;[0-9]+(,[0-9]+)?)))?(\s+)(?&lt;uom&gt;%%uom))(?!\w))</text>
    </regExp>
    <rule refid="quantity"></rule>
    <parameters>
      <param name="uom" xPath="(./*[local-name()='Display']|./*[local-name()='CatalogSymbol'])[1]"></param>
    </parameters>
    <action groupForReplace="replace">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <xsl:element name="quantity">
                <xsl:element name="quantityGroup">
                  <xsl:attribute name="quantityUnitOfMeasure">
                    <xsl:value-of select="./*[local-name()='CatalogSymbol']"></xsl:value-of>
                  </xsl:attribute>
                  <xsl:element name="quantityValue">
                    <xsl:value-of select="translate($externalData//param[@name='val']/@value,',','.')"></xsl:value-of>
                  </xsl:element>
                  <xsl:if test="$externalData//param[@name='tolerance']/@value!=''">
                    <xsl:element name="quantityTolerance">
                      <xsl:choose>
                        <xsl:when test="$externalData//param[@name='pm']/@value='-'">
                          <xsl:attribute name="quantityToleranceType">minus</xsl:attribute>
                        </xsl:when>
                        <xsl:when test="$externalData//param[@name='pm']/@value='+'">
                          <xsl:attribute name="quantityToleranceType">plus</xsl:attribute>
                        </xsl:when>
                        <xsl:when test="$externalData//param[@name='pm']/@value='±'">
                          <xsl:attribute name="quantityToleranceType">plusorminus</xsl:attribute>
                        </xsl:when>
                      </xsl:choose>
                      <xsl:value-of select="translate($externalData//param[@name='toleranceVal']/@value,',','.')"></xsl:value-of>
                    </xsl:element>
                  </xsl:if>
                </xsl:element>
              </xsl:element>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="functionalItem_ref" enabled="True">
    <groupName lang="en">References to functional items</groupName>
    <groupName lang="ru">Функциональные единицы</groupName>
    <xPathItems>repdocuments()//functionalItemSpec</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to functional item ref: ',functionalItemIdent/@functionalItemNumber)</text>
      <text lang="ru">concat('Создать ссылку на функциональную единицу: ',functionalItemIdent/@functionalItemNumber)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="functionalItemRef"></rule>
    <parameters>
      <param name="value" xPath="functionalItemIdent/@functionalItemNumber"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <xsl:element name="functionalItemRef">
                <xsl:attribute name="functionalItemNumber">
                  <xsl:value-of select="functionalItemIdent/@functionalItemNumber"></xsl:value-of>
                </xsl:attribute>
                <xsl:copy-of select="name"></xsl:copy-of>
                <xsl:copy-of select="shortName"></xsl:copy-of>
                <!--<xsl:copy-of select="refs"></xsl:copy-of>-->
              </xsl:element>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="circuitBreaker_ref" enabled="True">
    <groupName lang="en">References to circuit breakers</groupName>
    <groupName lang="ru">Автоматы защиты сети</groupName>
    <xPathItems>repdocuments()//circuitBreakerSpec</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to circuit breaker ref: ', circuitBreakerIdent/@circuitBreakerNumber)</text>
      <text lang="ru">concat('Создать ссылку на автомат защиты цепи: ', circuitBreakerIdent/@circuitBreakerNumber)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="circuitBreakerRef"></rule>
    <parameters>
      <param name="value" xPath="circuitBreakerIdent/@circuitBreakerNumber"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <circuitBreakerRef>
                <xsl:attribute name="circuitBreakerNumber">
                  <xsl:value-of select="circuitBreakerIdent/@circuitBreakerNumber"></xsl:value-of>
                </xsl:attribute>
                <xsl:copy-of select="name"></xsl:copy-of>
                <xsl:copy-of select="shortName"></xsl:copy-of>
                <!--<xsl:copy-of select="refs"></xsl:copy-of>-->
              </circuitBreakerRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>


  <smartTag id="zone_ref" enabled="True">
    <groupName lang="en">References to zones</groupName>
    <groupName lang="ru">Зоны</groupName>
    <xPathItems>repdocuments()//zoneSpec</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to zone ref: ',zoneIdent/@zoneNumber)</text>
      <text lang="ru">concat('Создать ссылку на зону: ',zoneIdent/@zoneNumber)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="zoneRef"></rule>
    <parameters>
      <param name="value" xPath="zoneIdent/@zoneNumber"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <zoneRef>
                <xsl:attribute name="zoneNumber">
                  <xsl:value-of select="zoneIdent/@zoneNumber"></xsl:value-of>
                </xsl:attribute>
                <!--<xsl:copy-of select="refs"></xsl:copy-of>-->
              </zoneRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="accessPoint_ref" enabled="True">
    <groupName lang="en">References to access points</groupName>
    <groupName lang="ru">Точки доступа</groupName>
    <xPathItems>repdocuments()//accessPointSpec</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to access point ref: ', accessPointIdent/@accessPointNumber)</text>
      <text lang="ru">concat('Создать ссылку на точку доступа: ', accessPointIdent/@accessPointNumber)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="accessPointRef"></rule>
    <parameters>
      <param name="value" xPath="accessPointIdent/@accessPointNumber"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <accessPointRef>
                <xsl:attribute name="accessPointNumber">
                  <xsl:value-of select="accessPointIdent/@accessPointNumber"></xsl:value-of>
                </xsl:attribute>
                <!--<xsl:copy-of select="refs"></xsl:copy-of>-->
              </accessPointRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>



  <smartTag id="controlIndicator_ref" enabled="True">
    <groupName lang="en">References to control indicators</groupName>
    <groupName lang="ru">Органы управления и индикации</groupName>
    <xPathItems>repdocuments()//controlIndicatorSpec</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to control indicator ref: ', controlIndicatorKey, ' (', @controlIndicatorNumber,')')</text>
      <text lang="ru">concat('Создать ссылку на органы управления и индикации: ', controlIndicatorKey, ' (', @controlIndicatorNumber,')')</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;any&gt;(?&lt;key&gt;%%key)|(?&lt;number&gt;%%number)|(?&lt;shortName&gt;%%shortName))(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;any&gt;(?&lt;key&gt;%%key)|(?&lt;number&gt;%%number)|(?&lt;shortName&gt;%%shortName))(?!\w))</text>
    </regExp>
    <rule refid="controlIndicatorRef"></rule>
    <parameters>
      <param name="key" xPath="controlIndicatorKey"></param>
      <param name="number" xPath="@controlIndicatorNumber"></param>
      <param name="shortName" xPath="shortName"></param>
    </parameters>
    <action groupForReplace="any">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <controlIndicatorRef>
                <xsl:attribute name="controlIndicatorNumber">
                  <xsl:value-of select="@controlIndicatorNumber"></xsl:value-of>
                </xsl:attribute>
                <xsl:copy-of select="shortName"></xsl:copy-of>
              </controlIndicatorRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>


  <smartTag id="dmc_ref" enabled="True">
    <groupName lang="en">References to data modules</groupName>
    <groupName lang="ru">Модули данных</groupName>
    <xPathItems>/*</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to dmRef','')</text>
      <text lang="ru">concat('Создать ссылку на МД','')</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(DMC(\-|−|‐|‑|‒|–|—|―)|DME(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionProducer&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionCode&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―))?(?&lt;modelIdentCode&gt;[A-Z0-9]{2,14})(\-|−|‐|‑|‒|–|—|―)(?&lt;systemDiffCode&gt;[A-Z0-9]{1,4})(\-|−|‐|‑|‒|–|—|―)(?&lt;systemCode&gt;[A-Z0-9]{2,3})(\-|−|‐|‑|‒|–|—|―)(?&lt;subSystemCode&gt;[A-Z0-9])(?&lt;subSubSystemCode&gt;[A-Z0-9])(\-|−|‐|‑|‒|–|—|―)(?&lt;assyCode&gt;[A-Z0-9]{2}|[A-Z0-9]{4})(\-|−|‐|‑|‒|–|—|―)(?&lt;disassyCode&gt;[A-Z0-9]{2})(?&lt;disassyCodeVariant&gt;[A-Z0-9]{1,3})(\-|−|‐|‑|‒|–|—|―)(?&lt;infoCode&gt;[A-Z0-9]{3})(?&lt;infoCodeVariant&gt;[A-Z0-9]{1})(\-|−|‐|‑|‒|–|—|―)(?&lt;itemLocationCode&gt;[ABCDT])((\-|−|‐|‑|‒|–|—|―)(?&lt;learnCode&gt;[T|H][A-Z0-9]{2})(\-|−|‐|‑|‒|–|—|―)(?&lt;learnEventCode&gt;[ABCDE]))?)</text>
      <text lang="ru">(?&lt;all&gt;(DMC(\-|−|‐|‑|‒|–|—|―)|DME(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionProducer&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionCode&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―))?(?&lt;modelIdentCode&gt;[A-Z0-9]{2,14})(\-|−|‐|‑|‒|–|—|―)(?&lt;systemDiffCode&gt;[A-Z0-9]{1,4})(\-|−|‐|‑|‒|–|—|―)(?&lt;systemCode&gt;[A-Z0-9]{2,3})(\-|−|‐|‑|‒|–|—|―)(?&lt;subSystemCode&gt;[A-Z0-9])(?&lt;subSubSystemCode&gt;[A-Z0-9])(\-|−|‐|‑|‒|–|—|―)(?&lt;assyCode&gt;[A-Z0-9]{2}|[A-Z0-9]{4})(\-|−|‐|‑|‒|–|—|―)(?&lt;disassyCode&gt;[A-Z0-9]{2})(?&lt;disassyCodeVariant&gt;[A-Z0-9]{1,3})(\-|−|‐|‑|‒|–|—|―)(?&lt;infoCode&gt;[A-Z0-9]{3})(?&lt;infoCodeVariant&gt;[A-Z0-9]{1})(\-|−|‐|‑|‒|–|—|―)(?&lt;itemLocationCode&gt;[ABCDT])((\-|−|‐|‑|‒|–|—|―)(?&lt;learnCode&gt;[T|H][A-Z0-9]{2})(\-|−|‐|‑|‒|–|—|―)(?&lt;learnEventCode&gt;[ABCDE]))?)</text>
    </regExp>
    <rule refid="DMRef"></rule>
    <parameters>
      <param name="value" xPath="string('')"></param>
    </parameters>
    <action groupForReplace="all">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <dmRef>
                <dmRefIdent>
                  <xsl:if test="$externalData//param[@name='extensionProducer']/@value!=''">
                    <identExtension>
                      <xsl:attribute name="extensionProducer">
                        <xsl:value-of select="$externalData//param[@name='extensionProducer']/@value"></xsl:value-of>
                      </xsl:attribute>
                      <xsl:attribute name="extensionCode">
                        <xsl:value-of select="$externalData//param[@name='extensionCode']/@value"></xsl:value-of>
                      </xsl:attribute>
                    </identExtension>
                  </xsl:if>
                  <dmCode>
                    <xsl:attribute name="modelIdentCode">
                      <xsl:value-of select="$externalData//param[@name='modelIdentCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="systemDiffCode">
                      <xsl:value-of select="$externalData//param[@name='systemDiffCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="systemCode">
                      <xsl:value-of select="$externalData//param[@name='systemCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="subSystemCode">
                      <xsl:value-of select="$externalData//param[@name='subSystemCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="subSubSystemCode">
                      <xsl:value-of select="$externalData//param[@name='subSubSystemCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="assyCode">
                      <xsl:value-of select="$externalData//param[@name='assyCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="disassyCode">
                      <xsl:value-of select="$externalData//param[@name='disassyCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="disassyCodeVariant">
                      <xsl:value-of select="$externalData//param[@name='disassyCodeVariant']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="infoCode">
                      <xsl:value-of select="$externalData//param[@name='infoCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="infoCodeVariant">
                      <xsl:value-of select="$externalData//param[@name='infoCodeVariant']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="itemLocationCode">
                      <xsl:value-of select="$externalData//param[@name='itemLocationCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:if test="$externalData//param[@name='learnCode']/@value!=''">
                      <xsl:attribute name="learnCode">
                        <xsl:value-of select="$externalData//param[@name='learnCode']/@value"></xsl:value-of>
                      </xsl:attribute>
                      <xsl:attribute name="learnEventCode">
                        <xsl:value-of select="$externalData//param[@name='learnEventCode']/@value"></xsl:value-of>
                      </xsl:attribute>
                    </xsl:if>
                  </dmCode>
                </dmRefIdent>
              </dmRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="pmc_ref" enabled="True">
    <groupName lang="en">References to publication modules</groupName>
    <groupName lang="ru">Публикационные модули</groupName>
    <xPathItems>/*</xPathItems>
    <displayText>
      <text lang="en">concat('Convert to pmRef','')</text>
      <text lang="ru">concat('Создать ссылку на ПМ','')</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(^|\s)(?&lt;all&gt;(PMC(\-|−|‐|‑|‒|–|—|―)|PME(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionProducer&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionCode&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―))?(?&lt;modelIdentCode&gt;[A-Z0-9]{2,14})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmIssuer&gt;[A-Z0-9]{5})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmNumber&gt;[A-Z0-9]{5})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmVolume&gt;[A-Z0-9]{2}))($|\s)</text>
      <text lang="ru">(^|\s)(?&lt;all&gt;(PMC(\-|−|‐|‑|‒|–|—|―)|PME(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionProducer&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―)(?&lt;extensionCode&gt;[A-Z0-9]{3,8})(\-|−|‐|‑|‒|–|—|―))?(?&lt;modelIdentCode&gt;[A-Z0-9]{2,14})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmIssuer&gt;[A-Z0-9]{5})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmNumber&gt;[A-Z0-9]{5})(\-|−|‐|‑|‒|–|—|―)(?&lt;pmVolume&gt;[A-Z0-9]{2}))($|\s)</text>
    </regExp>
    <rule refid="PMRef"></rule>
    <parameters>
      <param name="value" xPath="string('')"></param>
    </parameters>
    <action groupForReplace="all">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <pmRef>
                <pmRefIdent>
                  <xsl:if test="$externalData//param[@name='extensionProducer']/@value!=''">
                    <identExtension>
                      <xsl:attribute name="extensionProducer">
                        <xsl:value-of select="$externalData//param[@name='extensionProducer']/@value"></xsl:value-of>
                      </xsl:attribute>
                      <xsl:attribute name="extensionCode">
                        <xsl:value-of select="$externalData//param[@name='extensionCode']/@value"></xsl:value-of>
                      </xsl:attribute>
                    </identExtension>
                  </xsl:if>
                  <pmCode>
                    <xsl:attribute name="modelIdentCode">
                      <xsl:value-of select="$externalData//param[@name='modelIdentCode']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="pmIssuer">
                      <xsl:value-of select="$externalData//param[@name='pmIssuer']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="pmNumber">
                      <xsl:value-of select="$externalData//param[@name='pmNumber']/@value"></xsl:value-of>
                    </xsl:attribute>
                    <xsl:attribute name="pmVolume">
                      <xsl:value-of select="$externalData//param[@name='pmVolume']/@value"></xsl:value-of>
                    </xsl:attribute>
                  </pmCode>
                </pmRefIdent>
              </pmRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>  
  

  <smartTag id="para_ref" enabled="True">
    <groupName lang="en">References to paragraphs</groupName>
    <groupName lang="ru">Параграфы</groupName>
    <xPathItems>//levelledPara</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to para: ',./title)</text>
      <text lang="ru">concat('Ссылка на параграф: ',./title)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Cc]hap[a-z]{0,4}\.*:*\s*)(?&lt;value&gt;%%value))(?!\w)</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Рр]аздел[а-я]{0,4}\.*:*\s*)(?&lt;value&gt;%%value))(?!\w)</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="transform(self::*,'levelledParaNumber')"></param>
    </parameters>
    <action groupForReplace="all">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt07</xsl:attribute>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>


  <smartTag id="step_ref" enabled="True">
    <groupName lang="en">References to steps</groupName>
    <groupName lang="ru">Шаги</groupName>
    <xPathItems>//proceduralStep</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to step: ',./title)</text>
      <text lang="ru">concat('Ссылка на шаг: ',./title)</text>
    </displayText>
    <regExp case="False">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Ss]tep[a-z]{0,1}\.*:*\s*)(?&lt;value&gt;%%value))(?!\w|\.\d+)</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Шш]аг[а-я]{0,3}\.*:*\s*)(?&lt;value&gt;%%value))(?!\w|\.\d+)</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="transform(self::*,'proceduralStepNumber')"></param>
    </parameters>
    <action groupForReplace="all">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt08</xsl:attribute>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>


  <smartTag id="acronym_ref" enabled="True">
    <groupName lang="en">References to acronyms</groupName>
    <groupName lang="ru">Ссылки на акронимы</groupName>
    <xPathItems>//acronym</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to acronym: ',./acronymTerm,' - ',./acronymDefinition)</text>
      <text lang="ru">concat('Ссылка на акроним: ',./acronymTerm,' - ',./acronymDefinition)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="acronymTerm"></rule>
    <parameters>
      <param name="value" xPath="string(./acronymTerm)"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <acronymTerm>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:copy-of select="./acronymTerm/node()"></xsl:copy-of>
              </acronymTerm>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

	<smartTag id="acronym" enabled="True" updateAfterApplied="True">
		<groupName lang="en">Acronyms</groupName>
    <groupName lang="ru">Акронимы</groupName>
		<xPathItems>getAcronyms()//acronym</xPathItems>
		<displayText>
			<text lang="en">concat('Insert acronym: ',./acronymTerm,' - ',./acronymDefinition)</text>
			<text lang="ru">concat('Вставить акроним: ',./acronymTerm,' - ',./acronymDefinition)</text>
		</displayText>
		<regExp case="True">
			<text lang="en">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
			<text lang="ru">(?&lt;all&gt;(?&lt;!\w)(?&lt;value&gt;%%value)(?!\w))</text>
		</regExp>
		<rule refid="acronymTerm"></rule>
		<parameters>
			<param name="value" xPath="string(./acronymTerm)"></param>
		</parameters>
		<action groupForReplace="value">
			<xml>
				<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
					<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
					<xsl:param name="externalData"></xsl:param>
					<xsl:template match="*">
						<root>
							<acronym>
								<xsl:copy-of select="@acronymType"></xsl:copy-of>
								<acronymTerm>
									<xsl:copy-of select="./acronymTerm/node()"></xsl:copy-of>
								</acronymTerm>
								<acronymDefinition>
									<xsl:copy-of select="./acronymDefinition/node()"></xsl:copy-of>
								</acronymDefinition>
							</acronym>
						</root>
					</xsl:template>
				</xsl:stylesheet>
			</xml>
		</action>
	</smartTag>	
	

  <smartTag id="figure_ref" enabled="True">
    <groupName lang="en">References to figures</groupName>
    <groupName lang="ru">Иллюстрации</groupName>
    <xPathItems>//figure</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to figure: ',./title)</text>
      <text lang="ru">concat('Ссылка на рисунок: ',./title)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Ff]ig[a-z]{0,3}:*\s+)(([0-9]{1,2}),)*\s*(?&lt;value&gt;%%value))(?!\w)</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Рр]ис[а-я]{0,5}:*\s+)(([0-9]{1,2}),)*\s*(?&lt;value&gt;%%value))(?!\w)</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="count(preceding::figure) + 1"></param>
    </parameters>
    <action groupForReplace="all">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt01</xsl:attribute>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  
  <smartTag id="table_ref" enabled="True">
    <groupName lang="en">References to tables</groupName>
    <groupName lang="ru">Таблицы</groupName>
    <xPathItems>//table[title]</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to table: ',count(preceding::table[title]) + 1,' (',transform(self::*,'tableNumber'),') ',./title)</text>
      <text lang="ru">concat('Ссылка на таблицу: ',count(preceding::table[title]) + 1,' (',transform(self::*,'tableNumber'),') ',./title)</text>
    </displayText>
    <regExp case="True">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Tt]ab[a-z]{0,3}\.*:*\s*)(([0-9]{1,2})(,|\s+and\-))*\s*(?&lt;value&gt;(?&lt;valueBySeq&gt;%%valueBySeq)|(?&lt;valueByType&gt;%%valueByType)))(?!\w)</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;prefix&gt;[Тт]аб[а-я]{0,5}\.*:*\s*)(([0-9]{1,2})(,|\s+и\-))*\s*(?&lt;value&gt;(?&lt;valueBySeq&gt;%%valueBySeq)|(?&lt;valueByType&gt;%%valueByType)))(?!\w)</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="valueBySeq" xPath="count(preceding::table[title]) + 1"></param>
      <param name="valueByType" xPath="transform(self::*,'tableNumber')"></param>
    </parameters>
    <action groupForReplace="value">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt02</xsl:attribute>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="hotspot_ref" enabled="True">
    <groupName lang="en">References to hotspots</groupName>
    <groupName lang="ru">Активные области</groupName>
    <xPathItems>//hotspot[@hotspotTitle]</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to hotspot: ',./@applicationStructureName,' - ',./@hotspotTitle)</text>
      <text lang="ru">concat('Ссылка на активную область: ',./@applicationStructureName,' - ',./@hotspotTitle)</text>
    </displayText>
    <regExp case="False">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;%%definition\w*:*\s*\(?\[?(?&lt;term&gt;%%term)\]?\)?)(?!\w)</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;%%definition\w*:*\s*\(?\[?(?&lt;term&gt;%%term)\]?\)?)(?!\w)</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>

      <param name="term" xPath="@applicationStructureName"></param>
      <param name="definition" xPath="stem(.,string(@hotspotTitle),'','')"></param>
    </parameters>
    <action groupForReplace="term">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(.,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt11</xsl:attribute>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="supply_ref" enabled="True">
    <groupName lang="en">References to supplies</groupName>
    <groupName lang="ru">Материалы</groupName>
    <xPathItems>//supplyDescr/name|//supplyDescr/shortName|//supplyDescr/natoStockNumber|//supplyDescr//partNumber</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to supply: ',.)</text>
      <text lang="ru">concat('Ссылка на материал: ',.)</text>
    </displayText>
    <regExp case="False">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="stem(.,.,'','')"></param>
    </parameters>
    <action groupForReplace="name">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(ancestor::supplyDescr,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt04</xsl:attribute>
                <xsl:value-of select="$externalData//param[@name='name']/@value"></xsl:value-of>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="equip_ref" enabled="True">
    <groupName lang="en">References to equipments</groupName>
    <groupName lang="ru">Вспомогательное оборудование</groupName>
    <xPathItems>//supportEquipDescr/name|//supportEquipDescr/shortName|//supportEquipDescr/natoStockNumber|//supportEquipDescr//partNumber</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to support equipment: ',.)</text>
      <text lang="ru">concat('Ссылка на вспомогательное оборудование: ',.)</text>
    </displayText>
    <regExp case="False">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="stem(.,.,'','')"></param>
    </parameters>
    <action groupForReplace="name">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(ancestor::supportEquipDescr,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt05</xsl:attribute>
                <xsl:value-of select="$externalData//param[@name='name']/@value"></xsl:value-of>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

  <smartTag id="spare_ref" enabled="True">
    <groupName lang="en">References to spares</groupName>
    <groupName lang="ru">Запасные части</groupName>
    <xPathItems>//spareDescr/name|//spareDescr/shortName|//spareDescr/natoStockNumber|//spareDescr//partNumber</xPathItems>
    <displayText>
      <text lang="en">concat('Reference to spare: ',.)</text>
      <text lang="ru">concat('Ссылка на запасную часть: ',.)</text>
    </displayText>
    <regExp case="False">
      <text lang="en">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
      <text lang="ru">(?&lt;!\w)(?&lt;all&gt;(?&lt;name&gt;%%value)(?!\w))</text>
    </regExp>
    <rule refid="internalRef"></rule>
    <parameters>
      <param name="value" xPath="stem(.,.,'','')"></param>
    </parameters>
    <action groupForReplace="name">
      <xml>
        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xef="http://www.libroplanta.com/xmlEditorFunctions" exclude-result-prefixes="fn xs xef">
          <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
          <xsl:param name="externalData"></xsl:param>
          <xsl:template match="*">
            <root>
              <internalRef>
                <xsl:attribute name="internalRefId">
                  <xsl:value-of select="xef:XPATH2V(ancestor::spareDescr,'setattr(self::*,&quot;id&quot;)')"></xsl:value-of>
                </xsl:attribute>
                <xsl:attribute name="internalRefTargetType">irtt06</xsl:attribute>
                <xsl:value-of select="$externalData//param[@name='name']/@value"></xsl:value-of>
              </internalRef>
            </root>
          </xsl:template>
        </xsl:stylesheet>
      </xml>
    </action>
  </smartTag>

</smartTagsSettings>